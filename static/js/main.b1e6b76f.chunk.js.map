{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","state","isFlipped","handleClick","bind","event","preventDefault","this","setState","prevState","className","flipDirection","onMouseEnter","alt","src","id","name","email","onMouseLeave","borderColor","borderWidth","borderStyle","icon","iconColor","backgroundColor","iconSize","roundness","url","size","React","Component","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","onSearchChange","searchfield","target","value","seen","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2TA2CeA,E,kDArCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,WAAU,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALL,E,wDAQNC,GACRA,EAAMC,iBACNC,KAAKC,UAAS,SAAAC,GAAS,MAAI,CAACP,WAAYO,EAAUP,gB,+BAGlD,OACI,yBAAKQ,UAAU,2GACX,kBAAC,IAAD,CAAeR,UAAYK,KAAKN,MAAMC,UAAWS,cAAe,cAC5D,yBAAMD,UAAU,eAAeE,aAAcL,KAAKJ,aAC9C,yBAAMU,IAAI,SAASC,IAAG,+BAA4BP,KAAKP,MAAMe,GAAvC,cACtB,6BACI,4BAAKR,KAAKP,MAAMgB,KAAhB,KACA,2BAAIT,KAAKP,MAAMiB,SAGvB,yBAAKP,UAAU,mBAAmBQ,aAAcX,KAAKJ,aACjD,4CACA,kBAAC,wBAAD,CAAwBgB,YAAY,mBAAmBC,YAAY,IAAIC,YAAY,QAAQC,KAAK,UAAUC,UAAU,sBAAsBC,gBAAgB,qBAAqBC,SAAS,IAAIC,UAAU,MAAMC,IAAI,sBAAsBC,KAAK,OAC3O,0BAAMlB,UAAU,UAChB,kBAAC,wBAAD,CAAwBS,YAAY,mBAAmBC,YAAY,IAAIC,YAAY,QAAQC,KAAK,YAAYC,UAAU,sBAAsBC,gBAAgB,sBAAsBC,SAAS,IAAIC,UAAU,MAAMC,IAAI,uBAAuBC,KAAK,OAC/O,0BAAMlB,UAAU,UAChB,kBAAC,wBAAD,CAAwBS,YAAY,mBAAmBC,YAAY,IAAIC,YAAY,QAAQC,KAAK,WAAWC,UAAU,sBAAsBC,gBAAgB,oBAAoBC,SAAS,IAAIC,UAAU,MAAMC,IAAI,uBAAuBC,KAAK,c,GA9BjPC,IAAMC,WCoBVC,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAOJ,EAAOG,GAAGpB,GACjBA,GAAKiB,EAAOG,GAAGnB,KACfA,KAAOgB,EAAOG,GAAGnB,KACjBC,MAASe,EAAOG,GAAGlB,aCC5BoB,G,MAbE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACf,OACI,yBAAK5B,UAAW,OACZ,2BACAA,UAAW,0CACX6B,KAAK,SACLC,YAAa,gBACbC,SAAWH,OCARI,EARD,SAAC1C,GACX,OACI,yBAAK2C,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC9D9C,EAAM+C,WCmBJC,E,kDArBX,WAAYhD,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRgD,UAAS,GAHC,E,8DAOAC,EAAOC,GACrB5C,KAAKC,SAAS,CAACyC,UAAS,M,+BAIxB,OAAI1C,KAAKN,MAAMgD,SACJ,qDAEJ1C,KAAKP,MAAM+C,a,GAhBElB,IAAMC,WCiDnBsB,G,wDA1CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAAChD,GACd,EAAKG,SAAS,CAAC8C,YAAajD,EAAMkD,OAAOC,SAbzC,EAAKvD,MAAQ,CACT+B,OAAQ,GACRsB,YAAY,GACZG,MAAM,GALA,E,gEASO,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKtD,SAAS,CAACwB,OAAQ8B,S,+BAKpC,IAAD,EAC2BvD,KAAKN,MAA5B+B,EADJ,EACIA,OAAQsB,EADZ,EACYA,YACVS,EAAgB/B,EAAOgC,QAAO,SAAAC,GAChC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASb,EAAYY,kBAEzD,OAAKlC,EAAOoC,OAKJ,yBAAK1D,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAW4B,aAAe/B,KAAK8C,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUrB,OAAS+B,OATxB,wBAAIrD,UAAU,MAAd,e,GAzBDmB,IAAMC,YCKJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.b1e6b76f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport {SocialMediaIconsReact} from 'social-media-icons-react';\r\n\r\n\r\nclass Card extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isFlipped:false\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event){\r\n        event.preventDefault();\r\n        this.setState(prevState =>({isFlipped: !prevState.isFlipped}));\r\n    }\r\n    render(){\r\n        return (\r\n            <div className='flipcard tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 content-center items-center justify-center'>\r\n                <ReactCardFlip isFlipped ={this.state.isFlipped} flipDirection =\"horizontal\">\r\n                    <div  className='card-side tc' onMouseEnter={this.handleClick}>\r\n                        <img  alt='robots' src = {`https://robohash.org/${this.props.id}?200x200`}/>\r\n                        <div>\r\n                            <h2>{this.props.name} </h2>\r\n                            <p>{this.props.email}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='card-side tc ml4' onMouseLeave={this.handleClick}>\r\n                        <h2> Contact me!</h2>\r\n                        <SocialMediaIconsReact  borderColor=\"rgba(0,0,0,0.25)\" borderWidth=\"5\" borderStyle=\"solid\" icon=\"twitter\" iconColor=\"rgba(255,255,255,1)\" backgroundColor=\"rgba(28,186,223,1)\" iconSize=\"5\" roundness=\"50%\" url=\"https://twitter.com\" size=\"35\" />\r\n                        <span className='space'></span>\r\n                        <SocialMediaIconsReact  borderColor=\"rgba(0,0,0,0.25)\" borderWidth=\"5\" borderStyle=\"solid\" icon=\"instagram\" iconColor=\"rgba(255,255,255,1)\" backgroundColor=\"rgba(158,113,197,1)\" iconSize=\"5\" roundness=\"50%\" url=\"https//instagram.com\" size=\"35\" />\r\n                        <span className='space'></span>\r\n                        <SocialMediaIconsReact  borderColor=\"rgba(0,0,0,0.25)\" borderWidth=\"5\" borderStyle=\"solid\" icon=\"facebook\" iconColor=\"rgba(255,255,255,1)\" backgroundColor=\"rgba(60,40,200,1)\" iconSize=\"5\" roundness=\"50%\" url=\"https://facebook.com\" size=\"35\" />\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key = {robots[i].id} \r\n                        id= {robots[i].name} \r\n                        name ={robots[i].name} \r\n                        email = {robots[i].email}\r\n                        />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox= ({searchChange}) => {\r\n    return(\r\n        <div className= 'pa2'>\r\n            <input\r\n            className= 'sticky pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder= 'Search Robots'\r\n            onChange ={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'3px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Oops, that's not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    \r\n    constructor (){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:'',\r\n            seen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount (){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users =>this.setState({robots: users}));\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render(){\r\n        const { robots, searchfield} = this.state;\r\n        const filteredRobots =robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n         })\r\n        if (!robots.length){\r\n            return <h1 className='tc'>Loading</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange= {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                        <CardList robots ={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}